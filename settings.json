/***
VS Code provides different scopes for settings:
(a) User settings - These settings are applied globally to any instance of VS Code you open.
(b) Workspace settings - These settings are specific to a project and override User settings. VS
    Code stores workspace settings at the root of the project in a .vscode folder.

VS Code stores setting values in a settings.json file:
(a) User settings.json location - Depending on your platform, the user settings file is located
    here:
    (a) Windows - %AppData%\Code\User\settings.json
  	(b) macOS - $HOME/Library/Application\ Support/Code/User/settings.json
  	(c) Linux - $HOME/.config/Code/User/settings.json
(b) Workspace settings.json location - The workspace settings file is located under the .vscode
    folder in your root folder. When you add a Workspace Settings settings.json file to your
    project or source control, the settings for the project will be shared by all users of that
    project.

The Settings editor ([File > Preferences > Settings] or [Ctrl + ,]) is the user interface that
enables you to review and modify setting values that are stored in a settings.json file.

*************************************subtree*******************************************************

To see the subtree commands, use:
$ git subtree -h

To add this repo as a subtree (i.e., as a subfolder) to your repository, run:
$ git subtree add --prefix=.vscode/ https://github.com/juan-carlos-trimino/vs-code-settings.git main --squash

To fetch content from a remote repo (i.e., this repo) and update the subtree, issue:
$ git subtree pull -P .vscode/ https://github.com/juan-carlos-trimino/vs-code-settings.git main --squash

If you make a change to the subtree, the commit will be stored in your repo and its logs.
$ git commit -am "add a comment"
$ git push origin main
If you want to update the remote repo (i.e., this repo) with the commit, run:
$ git subtree push -P .vscode https://github.com/juan-carlos-trimino/vs-code-settings.git main

To remove the subtree from your repo, execute:
$ git rm -r .vscode/
(The above command removes the subtree directory from your working directory and stages the removal
for commit. The -r flag tells git to recursively delete the directory.)
$ git commit -m "remove subtree"
xxxx
(The above command creates a new commit that records the removal of the subtree.)
The subtree is removed from your working directory and future commits, but the history of the subtree remains in your repository. You can still access it using tools like git log or git checkout.
$ git push origin main
***/
{
  //Enable/disable navigation breadcrumbs.
  "breadcrumbs.enabled": true,
  //Controls whether and how file paths are shown in the breadcrumbs view.
  // on: Shows the file path in the breadcrumbs view.
  // off: Do not show the file path in the breadcrumbs view.
  // last: Only shows the last element of the file path in the breadcrumbs view.
  "breadcrumbs.filePath": "on",
  //Controls the location of the debug toolbar.
  // floating: Shows debug toolbar in all views.
  // docked: Shows debug toolbar only in debug views.
  // commandCenter: `(Experimental)` Shows debug toolbar in the command center.
  // hidden: Do not show debug toolbar.
  "debug.toolBarLocation": "commandCenter",
  //
  "diffEditor.ignoreTrimWhitespace": false,
  //
  "editor.acceptSuggestionOnEnter": "off", //Press Tab to accept suggestion.
  "editor.bracketPairColorization.enabled": true,
  "editor.cursorBlinking": "phase",
  "editor.cursorSmoothCaretAnimation": "on",
  "editor.cursorStyle": "block",
  "editor.detectIndentation": false,
  "editor.find.autoFindInSelection": "multiline", //Automatically use find-in-selection if multiple lines are selected.
  "editor.fontFamily": "'Fira Code', Consolas, 'Courier New', monospace",
  "editor.fontLigatures": true,
  "editor.fontSize": 16,
  "editor.fontWeight": "normal",
  "editor.formatOnSave": false,
  "editor.guides.bracketPairs": "active",
  "editor.hover.enabled": true,
  "editor.indentSize": "tabSize",
  "editor.insertSpaces": true,
  "editor.lineNumbers": "on",
  "editor.minimap.enabled": true,
  "editor.minimap.maxColumn": 200,
  "editor.minimap.renderCharacters": false,
  "editor.minimap.showSlider": "always",
  "editor.minimap.size": "fill",
  "editor.mouseWheelZoom": true,
  "editor.multiCursorModifier": "ctrlCmd",
  "editor.renderWhitespace": "all",
  "editor.smoothScrolling": true,
  "editor.stickyScroll.enabled": true,
  "editor.tabSize": 2,
  "editor.wordWrap": "on",
  "explorer.autoReveal": false,
  "explorer.compactFolders": false, //File tree compact folders.
  "explorer.confirmDelete": true,
  "explorer.openEditors.visible": 9,
  "files.autoSave": "afterDelay",
  "files.autoSaveDelay": 300000, //Milliseconds (5 minutes).
  "files.defaultLanguage": "go", //Default language for new files.
  "files.encoding": "utf8",
  "files.eol": "\n",
  "files.insertFinalNewline": true, //Insert newline at end of file.
  "files.trimFinalNewlines": true,
  "files.trimTrailingWhitespace": true,
  "git.autofetch": true,
  "git.autoStash": true,
  "git.enableSmartCommit": false,
  "git.mergeEditor": true,
  "git.suggestSmartCommit": false,
  "markdown.editor.pasteUrlAsFormattedLink.enabled": "smart",
  "markdown.validate.enabled": true,
  "terminal.integrated.copyOnSelection": true,
  "terminal.integrated.cursorBlinking": true,
  "terminal.integrated.defaultProfile.windows": "Git Bash",
  "terminal.integrated.fontFamily": "Consolas, 'Courier New', monospace",
  "terminal.integrated.fontSize": 16,
  "terminal.integrated.fontWeight": "normal",
  "terminal.integrated.scrollback": 10000, //Scrollback buffer.
  "terminal.integrated.tabStopWidth": 2,
  "window.density.editorTabHeight": "default",
  "window.title": "${dirty} ${activeEditorLong} ${separator} ${remoteName}",
  "workbench.activityBar.location": "default",
  "workbench.colorTheme": "Visual Studio Dark",
  "workbench.editor.decorations.colors": true,
  "workbench.editor.enablePreview": false,
  "workbench.editor.openSideBySideDirection": "down", //Grid editor layout.
  "workbench.editor.pinnedTabSizing": "shrink",
  "workbench.editor.pinnedTabsOnSeparateRow": true,
  "workbench.editor.wrapTabs": true,
  "workbench.colorCustomizations": {
    "editorLineNumber.activeForeground": "#f3f0f0",
    "editor.lineHighlightBackground": "#3c3c3c",
    "tab.activeBackground": "#0c0c0c",
    "tab.activeBorder": "#39739d",
    "tab.activeForeground": "#fff",
    "tab.border": "#39739d",
    "tab.hoverBackground": "#333e36",
    "titleBar.activeBackground": "#0c0c0c",
    "titleBar.activeForeground": "#ffffff",
    "titleBar.border": "#39739d",
    "titleBar.inactiveBackground": "#ffffff",
    "titleBar.inactiveForeground": "#0c0c0c",
    "tree.indentGuidesStroke": "#999999",
  },
  "workbench.editor.openPositioning": "first", //Tab ordering.
  "workbench.editor.showTabs":"multiple",
  "workbench.iconTheme": "vs-minimal",
  "workbench.sideBar.location": "right",
  "workbench.startupEditor": "welcomePage",
  "workbench.statusBar.visible": true,
  "workbench.tree.enableStickyScroll": true,
  "workbench.tree.indent": 10,
  "workbench.tree.renderIndentGuides": "always",
  "[go]": {
    "editor.defaultFormatter": "golang.go",
    /***
    Gopls forces tab indentations on import sections when saving files. See
    https://github.com/golang/vscode-go/issues/3044
    https://github.com/golang/vscode-go/blob/master/docs/advanced.md#formatting-code-and-organizing-imports
    https://go-proverbs.github.io/ (See "Gofmt's style is no one's favorite, yet gofmt is
      everyone's favorite.")
    To force gopls not to format imports on save, use the following settings:
    ***/
    "editor.formatOnSave": false,
    "editor.codeActionsOnSave": {
      "source.organizeImports": "never"
    }
  },
  "[json]": {
    "editor.quickSuggestions": {
      "strings": true
    },
    "editor.suggest.insertMode": "replace",
  },
  "[markdown]": {
    "editor.unicodeHighlight.invisibleCharacters": true,
  },
  "[plaintext]": {
    "editor.unicodeHighlight.invisibleCharacters": true,
  },
}
